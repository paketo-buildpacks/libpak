// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	libcnb "github.com/buildpacks/libcnb/v2"
	mock "github.com/stretchr/testify/mock"
)

// Scanner is an autogenerated mock type for the Scanner type
type Scanner struct {
	mock.Mock
}

// ScanBuild provides a mock function with given fields: scanDir, formats
func (_m *Scanner) ScanBuild(scanDir string, formats ...libcnb.SBOMFormat) error {
	_va := make([]interface{}, len(formats))
	for _i := range formats {
		_va[_i] = formats[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, scanDir)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ScanBuild")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...libcnb.SBOMFormat) error); ok {
		r0 = rf(scanDir, formats...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScanLaunch provides a mock function with given fields: scanDir, formats
func (_m *Scanner) ScanLaunch(scanDir string, formats ...libcnb.SBOMFormat) error {
	_va := make([]interface{}, len(formats))
	for _i := range formats {
		_va[_i] = formats[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, scanDir)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ScanLaunch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...libcnb.SBOMFormat) error); ok {
		r0 = rf(scanDir, formats...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScanLayer provides a mock function with given fields: layer, scanDir, formats
func (_m *Scanner) ScanLayer(layer libcnb.Layer, scanDir string, formats ...libcnb.SBOMFormat) error {
	_va := make([]interface{}, len(formats))
	for _i := range formats {
		_va[_i] = formats[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, layer, scanDir)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ScanLayer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(libcnb.Layer, string, ...libcnb.SBOMFormat) error); ok {
		r0 = rf(layer, scanDir, formats...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewScanner creates a new instance of Scanner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScanner(t interface {
	mock.TestingT
	Cleanup(func())
}) *Scanner {
	mock := &Scanner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
