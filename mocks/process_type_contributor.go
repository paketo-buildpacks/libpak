// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	libcnb "github.com/buildpacks/libcnb/v2"

	mock "github.com/stretchr/testify/mock"
)

// ProcessTypeContributor is an autogenerated mock type for the ProcessTypeContributor type
type ProcessTypeContributor struct {
	mock.Mock
}

// Contribute provides a mock function with given fields: layer
func (_m *ProcessTypeContributor) Contribute(layer *libcnb.Layer) error {
	ret := _m.Called(layer)

	if len(ret) == 0 {
		panic("no return value specified for Contribute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*libcnb.Layer) error); ok {
		r0 = rf(layer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ContributeProcessTypes provides a mock function with given fields: layer
func (_m *ProcessTypeContributor) ContributeProcessTypes(layer *libcnb.Layer) ([]libcnb.Process, error) {
	ret := _m.Called(layer)

	if len(ret) == 0 {
		panic("no return value specified for ContributeProcessTypes")
	}

	var r0 []libcnb.Process
	var r1 error
	if rf, ok := ret.Get(0).(func(*libcnb.Layer) ([]libcnb.Process, error)); ok {
		return rf(layer)
	}
	if rf, ok := ret.Get(0).(func(*libcnb.Layer) []libcnb.Process); ok {
		r0 = rf(layer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]libcnb.Process)
		}
	}

	if rf, ok := ret.Get(1).(func(*libcnb.Layer) error); ok {
		r1 = rf(layer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Name provides a mock function with no fields
func (_m *ProcessTypeContributor) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewProcessTypeContributor creates a new instance of ProcessTypeContributor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProcessTypeContributor(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProcessTypeContributor {
	mock := &ProcessTypeContributor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
